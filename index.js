
const qrcode = require('qrcode-terminal');
const {
  default: makeWASocket,
  DisconnectReason,
  fetchLatestBaileysVersion,
  useMultiFileAuthState,
} = require('@whiskeysockets/baileys');
const P = require('pino');
const { responderConIA } = require('./gpt');

const sesiones = {};

const frasesReinicio = [
  "nuevo pedido",
  "otra cotizacion",
  "quiero empezar de nuevo",
  "empezar otra vez",
  "volver a empezar"
];

const frasesInicio = [
  "hola quiero mas informacion",
  "hola quiero info",
  "info",
  "informacion"
];

function normalizarTexto(texto) {
  return texto
    .toLowerCase()
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "") // quitar tildes
    .replace(/[¬°!.,]/g, "") // quitar signos
    .trim();
}

function dividirMensajeLargo(texto, maxLongitud = 4000) {
  const partes = [];
  let inicio = 0;
  while (inicio < texto.length) {
    let fin = inicio + maxLongitud;
    if (fin < texto.length) {
      const ultimoSalto = texto.lastIndexOf('\n', fin);
      const ultimoEspacio = texto.lastIndexOf(' ', fin);
      const corteNatural = Math.max(ultimoSalto, ultimoEspacio);
      if (corteNatural > inicio) fin = corteNatural;
    }
    const parte = texto.slice(inicio, fin).trim();
    if (parte) partes.push(parte);
    inicio = fin;
  }
  return partes;
}

async function startBot() {
  console.log("üöÄ Iniciando el bot...");
  const { state, saveCreds } = await useMultiFileAuthState('./auth_info_baileys');
  const { version } = await fetchLatestBaileysVersion();

  const sock = makeWASocket({
    version,
    auth: state,
    logger: P({ level: 'silent' }),
  });

  sock.ev.on("connection.update", (update) => {
    const { connection, lastDisconnect, qr } = update;
    if (qr) {
      console.log("üì∑ Escanea este c√≥digo QR con tu WhatsApp:");
      qrcode.generate(qr, { small: true });
    }
    if (connection === "connecting") {
      console.log("üîÑ Conectando a WhatsApp...");
    }
    if (connection === "open") {
      console.log("‚úÖ Bot conectado a WhatsApp");
    }
    if (connection === "close") {
      const shouldReconnect = lastDisconnect?.error?.output?.statusCode !== DisconnectReason.loggedOut;
      console.log("‚ùå Conexi√≥n cerrada:", lastDisconnect?.error);
      if (shouldReconnect) {
        console.log("üîÅ Reintentando conexi√≥n...");
        startBot();
      } else {
        console.log("üîí Sesi√≥n cerrada. Escanea el QR nuevamente.");
      }
    }
  });

  sock.ev.on("creds.update", saveCreds);

  sock.ev.on("messages.upsert", async ({ messages }) => {
    const msg = messages[0];
    if (!msg.message || msg.key.fromMe) return;

    const texto = msg.message?.conversation || msg.message?.extendedTextMessage?.text || "";
    const sender = msg.key.remoteJid;
    const textoNormalizado = normalizarTexto(texto);

    // üëâ Reinicio de sesi√≥n
    if (frasesReinicio.includes(textoNormalizado)) {
      delete sesiones[sender];
      await sock.sendMessage(sender, {
        text: `üëå ¬°Listo! Empezamos de nuevo.\n\n¬øSobre qu√© producto deseas informaci√≥n?\n\n1Ô∏è‚É£ TARJETAS DE PRESENTACI√ìN\n2Ô∏è‚É£ VOLANTES PUBLICITARIOS\n3Ô∏è‚É£ GIGANTOGRAF√çAS\n4Ô∏è‚É£ ROLL SCREEN\n5Ô∏è‚É£ STICKERS / VINILES\n6Ô∏è‚É£ M√ìDULOS\n7Ô∏è‚É£ P√ÅGINAS WEB\n8Ô∏è‚É£ OTROS`
      });
      return;
    }

    // üëâ Activaci√≥n inicial del bot
    if (!sesiones[sender] && frasesInicio.includes(textoNormalizado)) {
      await sock.sendMessage(sender, {
        text: `¬°Hola! üòä Gracias por escribirnos.\n\nOfrecemos tarjetas, volantes, gigantograf√≠as, m√≥dulos, roll screen, viniles y m√°s.\n\nüìç Estamos en Av. Bolivia 148, Centro Lima.\nüöö Hacemos delivery en Lima y env√≠os a provincia (costo adicional).\n\n¬øSobre qu√© producto deseas informaci√≥n?\n\n1Ô∏è‚É£ TARJETAS DE PRESENTACI√ìN\n2Ô∏è‚É£ VOLANTES PUBLICITARIOS\n3Ô∏è‚É£ GIGANTOGRAF√çAS\n4Ô∏è‚É£ ROLL SCREEN\n5Ô∏è‚É£ STICKERS / VINILES\n6Ô∏è‚É£ M√ìDULOS\n7Ô∏è‚É£ P√ÅGINAS WEB\n8Ô∏è‚É£ OTROS`
      });
      sesiones[sender] = { historial: [], finalizado: false };
      return;
    }

    // üëâ Si no est√° iniciada la sesi√≥n, ignorar
    if (!sesiones[sender]) return;

    if (sesiones[sender]?.finalizado) return;

    console.log(`üì© Mensaje de ${sender}: ${texto}`);

    try {
      const respuestasRapidas = {
        "1": `ü™™ Tarjetas de Presentaci√≥n:\nSon tarjetas de 5.5x9 cm impresas a full color por ambas caras en couche 350 Gr. plastificado mate.\nüí∞ S/ 49 por 1000 unidades.\n‚è±Ô∏è Entrega: 24h despu√©s de aprobar dise√±o.\nüé® Dise√±o incluido.`,
        "2": `üìÑ Volantes Publicitarios:\nImpresos en couche 115gr a full color por ambas caras.\nüìè Medidas y precios:\n- 1/4 de oficio: S/ 56 x millar\n- 1/2 oficio: S/ 110 x millar\n- 1 oficio: S/ 200 x millar\nüé® Dise√±o incluido.\n‚è±Ô∏è Entrega: 24h despu√©s de aprobar dise√±o.`,
        "3": `üñºÔ∏è Gigantograf√≠as:\nEstas se cotizan seg√∫n tama√±o y material.\nüì≤ Un asesor se pondr√° en contacto contigo para ayudarte.`,
        "4": `üì¢ Roll Screen o Parantes:\nRoll Screen de aluminio de 2m x 1m.\nIncluye: estuche y dise√±o personalizado.\nüí∞ Precio: S/ 115\nüé® Si no tienes dise√±o, te lo realizamos sin costo adicional.`,
        "5": `üè∑Ô∏è Stickers o Viniles:\nVar√≠an seg√∫n cantidad, corte y medida.\nüì≤ Te contactamos con un asesor para darte la mejor cotizaci√≥n.`,
        "6": `üß± M√≥dulos Publicitarios:\nM√≥dulo port√°til en PVC, rotulado con tu dise√±o.\nüí∞ Precio: S/ 249\nüéí Incluye estuche para f√°cil transporte.\nüé® Si no tienes dise√±o, lo hacemos sin costo.`,
        "7": `üíª P√°ginas Web:\nüì≤ Un asesor se comunicar√° contigo para conocer tu proyecto y brindarte una propuesta a medida.`,
        "8": `ü§î Cu√©ntame con m√°s detalle qu√© necesitas, ¬°y con gusto te ayudamos!`
      };

      const textoSimple = textoNormalizado;

      if (respuestasRapidas[textoSimple]) {
        const respuesta = respuestasRapidas[textoSimple];
        await sock.sendMessage(sender, { text: respuesta });
        sesiones[sender].historial.push({ role: "assistant", content: respuesta });
        return;
      }

      sesiones[sender].historial.push({ role: "user", content: texto });
      if (sesiones[sender].historial.length > 10) sesiones[sender].historial.splice(1, 1);

      const partes = await responderConIA(sesiones[sender].historial);
      for (const parte of partes) {
        await sock.sendMessage(sender, { text: parte });
        sesiones[sender].historial.push({ role: "assistant", content: parte });
      }

      const textoFinal = partes.join(" ").toLowerCase();
      if (
        textoFinal.includes("bcp: 19492223312059") ||
        textoFinal.includes("scotiabank: 0357487081") ||
        textoFinal.includes("yape") ||
        textoFinal.includes("plin")
      ) {
        sesiones[sender].finalizado = true;
        console.log(`‚úÖ Conversaci√≥n finalizada con ${sender}`);
      }

    } catch (e) {
      console.error("‚ùå Error:", e.message);
      await sock.sendMessage(sender, { text: "Ocurri√≥ un error. Intenta m√°s tarde." });
    }
  });
}

startBot();
